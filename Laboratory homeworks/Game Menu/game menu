#include <LiquidCrystal.h>
const int RS = 12;
const int enable = 11;
const int d4 = 5;
const int d5 = 4;
const int d6 = 3;
const int d7 = 2;

const int pinSw=10;
const int pinX=A0;
const int pinY=A1;
int valSw;
int valX=0;
int valY=0;

bool joyMoved=false;
int minTreshold=400;
int maxTreshold=600;

int level=0;
int score;
int hScore;
int arrowPos;
int lives=3;
bool loopGame=false;
bool loopScore=false;
bool gameOver=false;
unsigned long lastLoop=0;

const int swInt=100;
const int lvInt=2000;
unsigned long lastLvLoop=0;
int swState;
unsigned long lastSwState=0;
unsigned long current_time;

LiquidCrystal lcd(RS, enable, d4, d5, d6, d7);


void printMenu(){
  lcd.setCursor(1,0);
  lcd.print("Start ");
  lcd.setCursor(1,1);
  lcd.print("HighScore            ");
  lcd.setCursor(7,0);
  lcd.print("Setts      ");
}

void printArrow(){
  
 
  
  lcd.setCursor(0,0);
  lcd.print(" ");
  lcd.setCursor(0,1);
  lcd.print(" ");
  lcd.setCursor(6,0);
  lcd.print(" ");
  if(arrowPos==0) lcd.setCursor(0,0);
  else if (arrowPos==1) lcd.setCursor(0,1);
  else if (arrowPos==2) lcd.setCursor(6,0);
   lcd.print("*");
  
}

void select(){
  if(valSw==0 && current_time-lastSwState>=swInt){
    if(swState==0){
      swState=1;
    }
    else {
      swState=0;
    }
    lastSwState=current_time;
  }
}


void setup() {
  // put your setup code here, to run once:
  lcd.begin(16,2);
  Serial.begin(9600);
  pinMode(pinSw,INPUT_PULLUP);
}

void loop() {
  // put your main code here, to run repeatedly:


current_time=millis();
valSw=digitalRead(pinSw);

select();

if(swState==0){
  printMenu();
  valX=analogRead(pinX);
  if(valX>maxTreshold && joyMoved==false){
    arrowPos++;
    printArrow();
    joyMoved=true;
  }
   if(valX<minTreshold && joyMoved==false){
    arrowPos--;
    printArrow();
    joyMoved=true;
  }
   if(valX>=minTreshold && valX<=maxTreshold)
   {joyMoved=false;
   printArrow();}
}
else{
  if(arrowPos==0){
    score=level*5; //I tried to print without spaces but it keeps overwriting if I let them blank.
    lcd.setCursor(0,0);
    lcd.print("Lives: ");
    lcd.print(lives);
    lcd.print("Level: ");
    lcd.print(level);
    lcd.setCursor(0,1);
    lcd.print("Score: ");
    lcd.print(score);
    lcd.print("      ");
    if(loopScore==false)
    {lastLoop=millis();
    loopScore=true;
    }
    if(millis()-lastLvLoop>lvInt){
      level++;
      lastLvLoop=millis();
    }
    if(level>5)
    {
      lcd.setCursor(0,0);
      lcd.print("YOU WON!                               ");
      lcd.setCursor(0,1); 
      lcd.print("Hit the button to return!                   ");
      if(hScore<score) hScore=score;
    }
      
}

else if (arrowPos==1){
  lcd.setCursor(0,0);
  lcd.print("High score: ");
  lcd.print(hScore);
  
  lcd.setCursor(0,1);
  lcd.print("                        ");
}
else if(arrowPos==2){
  valX=analogRead(pinX);
  if(valX>maxTreshold && joyMoved==false){
    level++;
    joyMoved=true;
  }
   if(valX<minTreshold && joyMoved==false){
    level--;
    joyMoved=true;
  }
     if(valX>minTreshold && valX<maxTreshold){
    joyMoved=false;
  }
  if(level>5)level=0;
  if(level<0)level=5;
  lcd.setCursor(0,0);
  lcd.print("Select level: ");
  lcd.print(level);
  lcd.setCursor(0,1);
  lcd.print("                ");
}
}
}
